name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: hynfratech
          POSTGRES_USER: botontapwater
          POSTGRES_PASSWORD: TwoGreen1.
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U $POSTGRES_USER" --health-interval 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py makemigrations
          python manage.py migrate
          python manage.py test

      - name: Build Docker image
        run: |
          docker build -t botontapwater/hynfratech-assessment:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push botontapwater/hynfratech-assessment:latest

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SSH into VPS and Install Docker, Kubernetes, Minikube, and VirtualBox
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          # Setup SSH to VPS
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH into VPS and install Docker, Kubernetes, Minikube, and VirtualBox
          ssh -t -o StrictHostKeyChecking=no -p 2112 lab@102.209.68.78 << 'EOF'
            set -e
            echo 'lab ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/lab-nopasswd

            # 1. Install Docker
            if ! [ -x "$(command -v docker)" ]; then
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
            fi

            # 2. Install kubectl
            if ! [ -x "$(command -v kubectl)" ]; then
              sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl
              sudo curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
              sudo apt-add-repository "deb https://apt.kubernetes.io/ kubernetes-xenial main"
              sudo apt-get update
              sudo apt-get install -y kubectl
            fi

            # 3. Install Minikube
            if ! [ -x "$(command -v minikube)" ]; then
              curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
              sudo install minikube-linux-amd64 /usr/local/bin/minikube
            fi

            # 4. Start Minikube
            sudo minikube start --driver=none

            # Ensure Docker is used by Minikube
            eval $(minikube -p minikube docker-env)

            # 5. Install VirtualBox
            if ! [ -x "$(command -v VBoxManage)" ]; then
              sudo apt-get update
              sudo apt-get install -y virtualbox
            fi
          EOF

      - name: Deploy to Kubernetes on VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          # Setup SSH to VPS
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH into VPS and deploy the Kubernetes files
          ssh -o StrictHostKeyChecking=no -p 2112 lab@102.209.68.78 << 'EOF'
            # Pull the latest Docker image
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker pull botontapwater/hynfratech-assessment:latest

            # Apply Kubernetes manifests
            kubectl apply -f pvc.yml
            kubectl apply -f postgres-deployment.yml
            kubectl apply -f django-deployment.yml

            # Optionally restart any pods (if needed)
            # kubectl rollout restart deployment your-deployment-name

            # Verify the deployment
            kubectl get pods
            kubectl get svc
          EOF
