name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: hynfratech
          POSTGRES_USER: botontapwater
          POSTGRES_PASSWORD: TwoGreen1.
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U $POSTGRES_USER" --health-interval 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py makemigrations
          python manage.py migrate
          python manage.py test

      - name: Build Docker image
        run: |
          docker build -t botontapwater/hynfratech-assessment:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push botontapwater/hynfratech-assessment:latest

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SSH into VPS and Install Docker, Kubernetes, Minikube, and VirtualBox
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          ssh -o StrictHostKeyChecking=no -p 2112 lab@102.209.68.78 << EOF
            set -e
            echo "Starting installation process..."

            # Function to run sudo commands
            run_sudo() {
              echo "$VPS_PASSWORD" | sudo -S \$1
            }

            # # 1. Install Docker
            # if ! command -v docker &> /dev/null; then
            #   echo "Installing Docker..."
            #   run_sudo "apt-get update"
            #   # run_sudo "apt-get install docker"
            #   # run_sudo "apt-get install docker-compose"
            #   run_sudo "systemctl enable docker"
            #   run_sudo "systemctl start docker"
            # else
            #   echo "Docker is already installed."
            # fi

            # # 2. Install kubectl
            # if ! command -v kubectl &> /dev/null; then
            #   echo "Installing kubectl..."
            #   run_sudo "apt-get update && apt-get install -y apt-transport-https ca-certificates curl"
            #   curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | run_sudo "apt-key add -"
            #   echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | run_sudo "tee /etc/apt/sources.list.d/kubernetes.list"
            #   run_sudo "apt-get update"
            #   run_sudo "apt-get install -y kubectl"
            # else
            #   echo "kubectl is already installed."
            # fi

            # # 3. Install Minikube
            # if ! command -v minikube &> /dev/null; then
            #   echo "Installing Minikube..."
            #   curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            #   run_sudo "install minikube-linux-amd64 /usr/local/bin/minikube"
            # else
            #   echo "Minikube is already installed."
            # fi

            # # 4. Start Minikube
            # echo "Starting Minikube..."
            # run_sudo "minikube start --driver=none"

            # # 5. Install VirtualBox
            # if ! command -v VBoxManage &> /dev/null; then
            #   echo "Installing VirtualBox..."
            #   run_sudo "apt-get update"
            #   run_sudo "apt-get install -y virtualbox"
            # else
            #   echo "VirtualBox is already installed."
            # fi

            echo "Installation process completed."
          EOF
      - name: Deploy to Kubernetes on VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH into VPS and deploy
          ssh -o StrictHostKeyChecking=no -p 2112 lab@102.209.68.78 << 'EOF'
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker pull botontapwater/hynfratech-assessment:latest

            # Add other deployment commands here
          EOF
